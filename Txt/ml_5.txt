

    import pandas as pd
    from sklearn.model_selection import train_test_split
    from sklearn.ensemble import RandomForestClassifier
    import category_encoders as ce
    from sklearn.metrics import accuracy_score, confusion_matrix

    # Load the data
    data = pd.read_csv("car_evaluation.csv")

    # Display initial information about the data
    print("Data Columns:", data.columns)
    print(data.head())

    # Define features and target variable
    X = data.drop(columns=['Decision'])  # Assuming 'Decision' is the target column
    y = data['Decision']

    # Train-test split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Verify the shape of train and test sets
    print("X_train Shape:", X_train.shape)
    print("X_test Shape:", X_test.shape)

    # Verify column names in X_train to ensure they match those in the encoder
    print("X_train Columns:", X_train.columns)

    # Encoding categorical variables with OrdinalEncoder
    # Update cols to match the exact column names in X_train
    encoder = ce.OrdinalEncoder(cols=['Buying price', 'Maintance cost', 'No of doors', 'No of persons', 'lug_boot'])
    X_train = encoder.fit_transform(X_train)
    X_test = encoder.transform(X_test)

    # Train the RandomForestClassifier
    rfc = RandomForestClassifier(random_state=0)
    rfc.fit(X_train, y_train)

    # Predictions and evaluation
    y_pred = rfc.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    conf_matrix = confusion_matrix(y_test, y_pred)

    print("Accuracy:", accuracy)
    print("Confusion Matrix:\n", conf_matrix)

    Data Columns: Index(['Buying price', 'Maintance cost', 'No of doors', 'No of persons',
           'lug_boot', 'safety', 'Decision'],
          dtype='object')
      Buying price Maintance cost No of doors No of persons lug_boot safety  \
    0        vhigh          vhigh           2             2    small    low   
    1        vhigh          vhigh           2             2    small    med   
    2        vhigh          vhigh           2             2    small   high   
    3        vhigh          vhigh           2             2      med    low   
    4        vhigh          vhigh           2             2      med    med   

      Decision  
    0    unacc  
    1    unacc  
    2    unacc  
    3    unacc  
    4    unacc  
    X_train Shape: (1382, 6)
    X_test Shape: (346, 6)
    X_train Columns: Index(['Buying price', 'Maintance cost', 'No of doors', 'No of persons',
           'lug_boot', 'safety'],
          dtype='object')

    ---------------------------------------------------------------------------
    ValueError                                Traceback (most recent call last)
    /var/folders/86/ggmx90711p73pr1jqt5jz51h0000gn/T/ipykernel_50381/2991840797.py in ?()
         32 X_test = encoder.transform(X_test)
         33 
         34 # Train the RandomForestClassifier
         35 rfc = RandomForestClassifier(random_state=0)
    ---> 36 rfc.fit(X_train, y_train)
         37 
         38 # Predictions and evaluation
         39 y_pred = rfc.predict(X_test)

    /opt/anaconda3/lib/python3.12/site-packages/sklearn/base.py in ?(estimator, *args, **kwargs)
       1469                 skip_parameter_validation=(
       1470                     prefer_skip_nested_validation or global_skip_validation
       1471                 )
       1472             ):
    -> 1473                 return fit_method(estimator, *args, **kwargs)

    /opt/anaconda3/lib/python3.12/site-packages/sklearn/ensemble/_forest.py in ?(self, X, y, sample_weight)
        359         # Validate or convert input data
        360         if issparse(y):
        361             raise ValueError("sparse multilabel-indicator for y is not supported.")
        362 
    --> 363         X, y = self._validate_data(
        364             X,
        365             y,
        366             multi_output=True,

    /opt/anaconda3/lib/python3.12/site-packages/sklearn/base.py in ?(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)
        646                 if "estimator" not in check_y_params:
        647                     check_y_params = {**default_check_params, **check_y_params}
        648                 y = check_array(y, input_name="y", **check_y_params)
        649             else:
    --> 650                 X, y = check_X_y(X, y, **check_params)
        651             out = X, y
        652 
        653         if not no_val_X and check_params.get("ensure_2d", True):

    /opt/anaconda3/lib/python3.12/site-packages/sklearn/utils/validation.py in ?(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)
       1297         raise ValueError(
       1298             f"{estimator_name} requires y to be passed, but the target y is None"
       1299         )
       1300 
    -> 1301     X = check_array(
       1302         X,
       1303         accept_sparse=accept_sparse,
       1304         accept_large_sparse=accept_large_sparse,

    /opt/anaconda3/lib/python3.12/site-packages/sklearn/utils/validation.py in ?(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)
       1009                         )
       1010                     array = xp.astype(array, dtype, copy=False)
       1011                 else:
       1012                     array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)
    -> 1013             except ComplexWarning as complex_warning:
       1014                 raise ValueError(
       1015                     "Complex data not supported\n{}\n".format(array)
       1016                 ) from complex_warning

    /opt/anaconda3/lib/python3.12/site-packages/sklearn/utils/_array_api.py in ?(array, dtype, order, copy, xp, device)
        747         # Use NumPy API to support order
        748         if copy is True:
        749             array = numpy.array(array, order=order, dtype=dtype)
        750         else:
    --> 751             array = numpy.asarray(array, order=order, dtype=dtype)
        752 
        753         # At this point array is a NumPy ndarray. We convert it to an array
        754         # container that is consistent with the input's namespace.

    /opt/anaconda3/lib/python3.12/site-packages/pandas/core/generic.py in ?(self, dtype, copy)
       2149     def __array__(
       2150         self, dtype: npt.DTypeLike | None = None, copy: bool_t | None = None
       2151     ) -> np.ndarray:
       2152         values = self._values
    -> 2153         arr = np.asarray(values, dtype=dtype)
       2154         if (
       2155             astype_is_view(values.dtype, arr.dtype)
       2156             and using_copy_on_write()

    ValueError: could not convert string to float: 'high'
